/* The following code was generated by JFlex 1.3.5 */

/* 
 * TypeScript definitions to Java translator - http://www.jsweet.org
 * Copyright (C) 2015 CINCHEO SAS <renaud.pawlak@cincheo.fr>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
 
package org.jsweet.input.typescriptdef.parser;

import java_cup.runtime.*;
import org.jsweet.input.typescriptdef.ast.Token;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * <tt>file:/Users/ck/Entwicklung/opensource/jsweet/candy-generator/src/main/java/org/jsweet/input/typescriptdef/parser/typescriptdef.lex</tt>
 */
class TypescriptDefScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int EOL_COMMENT = 4;
  final public static int STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int TYPE_MACRO = 3;
  final public static int CHAR = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\61\1\5"+
    "\1\0\1\14\1\0\1\65\1\23\1\11\1\10\1\7\1\20\1\60"+
    "\1\21\1\22\1\6\1\15\11\16\1\53\1\54\1\57\1\12\1\13"+
    "\1\64\1\66\6\17\21\14\1\52\2\14\1\24\1\4\1\56\1\0"+
    "\1\14\1\0\1\33\1\47\1\34\1\37\1\30\1\32\2\14\1\25"+
    "\2\14\1\35\1\40\1\26\1\41\1\43\1\14\1\31\1\36\1\27"+
    "\1\42\1\46\1\51\1\45\1\44\1\14\1\50\1\63\1\55\1\62"+
    "\ufe80\0\1\67\u0100\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    56,   112,   168,   224,   280,   336,   392,   280,   448, 
      280,   504,   560,   616,   672,   728,   784,   840,   896,   952, 
     1008,   280,  1064,  1120,  1176,  1232,  1288,  1344,  1400,  1456, 
     1512,  1568,  1624,  1680,  1736,  1792,   280,   280,   280,   280, 
      280,  1848,   280,  1904,   280,  1960,   280,  2016,   280,   280, 
     2072,  2128,   280,  2184,  2240,  2296,  2352,  2408,  2464,  2520, 
     2576,   280,   392,  2632,  2688,  2744,  2800,   280,  2856,   504, 
     2912,   560,  2968,  3024,   280,   280,   280,  3080,   280,  3136, 
      280,   280,  3192,  1064,   280,  3248,  3304,  3360,  3416,  3472, 
     3528,  3584,  3640,  3696,  3752,  3808,  3864,  3920,  3976,  4032, 
     4088,  4144,  4200,  4256,  4312,   280,   280,  4368,   280,  4424, 
      280,   280,   280,   280,   280,   280,   280,   280,  4480,  4536, 
     4592,  4648,  4704,  4760,  4816,  4872,  4928,   280,  4984,  5040, 
     3080,   280,  5096,  5152,  5208,   728,  5264,  5320,  5376,  5432, 
     5488,  5544,  5600,  5656,  5712,  5768,  5824,  5880,  5936,  5992, 
     6048,  6104,  6160,  6216,  6272,  6328,  6384,  6440,  6496,  6552, 
     6608,  6664,  6720,  6776,  6832,   280,  6888,  6944,   280,  7000, 
     7056,  7112,  7168,  7224,  7280,  7336,  7392,  7448,   280,  7504, 
     7560,  7616,  7672,  7728,  7784,  7840,  7896,  7952,  8008,   280, 
     8064,  8120,  8176,  8232,  8288,   280,  8344,  6776,  8400,  8456, 
     8512,  8568,  8624,  8680,  8736,  8792,  8848,  8904,  8960,  9016, 
     9072,  9128,  9184,   280,  9240,  9296,  9352,  9408,  9464,  9520, 
     9576,  9632,  9688,  9744,   280,  9800,  9856,  9912,  9968, 10024, 
    10080,   280, 10136, 10192, 10248,   280, 10304, 10360, 10416, 10472, 
    10528, 10584, 10640, 10696, 10752, 10808,   280, 10864, 10920, 10976, 
    11032, 11088,   280, 11144, 11200, 11256, 11312,   280, 11368, 11424, 
    11480,   280,   280, 11536, 11592, 11648, 11704, 11760, 11816, 11872, 
      280, 11928, 11984,   280, 12040, 12096, 12152,   280, 12208, 12264, 
    12320, 12376, 12432, 12488, 12544, 12600, 12656,   280, 12712, 12768, 
    12824, 12880, 12936, 12992, 13048, 13104, 13160, 13216, 13272, 13328, 
      280, 13104, 13160, 13216, 13272, 13328, 13384, 13440, 13496, 13552, 
    13608,   280, 13664, 13720, 13776, 13832, 13888,   280,   280, 13944, 
    14000, 14056, 14112, 14168, 14224, 14280, 14336, 14392, 14448, 14504, 
      280, 14560, 14616, 14672, 14728, 14784, 14840, 14896, 14952,   728, 
    15008, 15064, 15120,   280,   280, 15176,   280, 15232, 15288, 15344, 
    15400, 15456,   728, 15512, 15568, 15624,   280, 15680, 15736, 15792, 
      728, 15848, 15904,   280, 15960, 16016, 16072, 16128,   728,   280
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\6\1\7\1\10\2\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\20\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\3\20"+
    "\1\43\2\20\1\44\1\20\1\45\2\20\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\2\62\1\63\1\64\1\65"+
    "\62\63\1\66\2\62\1\66\1\67\16\66\1\65\44\66"+
    "\1\62\2\70\1\71\23\62\1\72\1\73\6\62\1\74"+
    "\30\62\1\6\1\75\1\76\65\6\72\0\1\10\1\77"+
    "\23\0\1\100\1\101\6\0\1\102\13\0\1\46\7\0"+
    "\1\103\7\0\1\77\23\0\1\100\1\101\6\0\1\102"+
    "\13\0\1\46\7\0\1\103\12\0\1\104\1\105\63\0"+
    "\1\106\6\0\1\107\55\0\10\110\1\111\1\112\56\110"+
    "\12\0\1\113\1\114\66\0\1\115\71\0\4\20\5\0"+
    "\23\20\1\0\2\20\31\0\4\20\5\0\20\20\1\116"+
    "\2\20\1\0\1\20\1\116\31\0\1\20\2\22\1\20"+
    "\5\0\23\20\1\0\2\20\32\0\1\117\1\120\1\0"+
    "\1\121\64\0\1\117\1\120\2\0\1\122\70\0\1\123"+
    "\50\0\1\124\52\0\1\125\25\0\4\20\5\0\1\20"+
    "\1\126\7\20\1\127\1\20\1\130\7\20\1\0\2\20"+
    "\31\0\4\20\5\0\3\20\1\131\17\20\1\0\2\20"+
    "\31\0\4\20\5\0\17\20\1\132\3\20\1\0\2\20"+
    "\31\0\4\20\5\0\1\20\1\133\16\20\1\134\2\20"+
    "\1\0\2\20\31\0\4\20\5\0\3\20\1\135\17\20"+
    "\1\0\2\20\31\0\4\20\5\0\4\20\1\136\10\20"+
    "\1\137\5\20\1\0\2\20\31\0\4\20\5\0\11\20"+
    "\1\140\10\20\1\141\1\0\2\20\31\0\4\20\5\0"+
    "\10\20\1\142\3\20\1\143\6\20\1\0\2\20\31\0"+
    "\4\20\5\0\3\20\1\144\17\20\1\0\2\20\31\0"+
    "\4\20\5\0\2\20\1\145\20\20\1\0\2\20\31\0"+
    "\4\20\5\0\3\20\1\146\17\20\1\0\2\20\31\0"+
    "\4\20\5\0\4\20\1\147\10\20\1\150\5\20\1\0"+
    "\2\20\31\0\4\20\5\0\6\20\1\151\14\20\1\0"+
    "\2\20\27\0\1\152\67\0\1\153\56\0\1\154\1\155"+
    "\1\156\57\0\1\157\71\0\1\160\2\0\1\63\2\0"+
    "\1\63\2\0\62\63\4\0\1\161\1\162\20\0\1\163"+
    "\1\164\1\0\1\165\36\0\1\66\2\0\1\66\1\0"+
    "\16\66\1\0\44\66\4\0\1\161\16\0\1\166\2\0"+
    "\1\163\1\164\1\0\1\165\37\0\3\70\2\0\1\167"+
    "\64\0\1\71\130\0\1\170\70\0\1\171\52\0\1\172"+
    "\41\0\1\76\131\0\1\173\70\0\1\174\52\0\1\175"+
    "\40\0\1\154\1\155\1\103\64\0\7\176\1\177\60\176"+
    "\13\0\1\200\57\0\1\111\6\0\1\201\55\0\10\112"+
    "\1\110\1\202\56\112\14\0\1\20\3\203\5\0\3\20"+
    "\1\203\1\20\3\203\2\20\1\203\7\20\1\203\1\0"+
    "\2\20\32\0\2\120\73\0\1\204\61\0\4\20\5\0"+
    "\2\20\1\205\20\20\1\0\2\20\20\0\1\206\10\0"+
    "\4\20\5\0\23\20\1\0\2\20\31\0\4\20\5\0"+
    "\16\20\1\207\4\20\1\0\2\20\31\0\4\20\5\0"+
    "\23\20\1\0\1\210\1\20\31\0\4\20\5\0\16\20"+
    "\1\211\4\20\1\0\2\20\31\0\4\20\5\0\15\20"+
    "\1\212\5\20\1\0\2\20\31\0\4\20\5\0\2\20"+
    "\1\213\13\20\1\214\4\20\1\0\2\20\31\0\4\20"+
    "\5\0\6\20\1\215\14\20\1\0\2\20\31\0\4\20"+
    "\5\0\14\20\1\216\6\20\1\0\2\20\31\0\4\20"+
    "\5\0\1\20\1\217\21\20\1\0\2\20\20\0\1\220"+
    "\10\0\4\20\5\0\23\20\1\0\2\20\31\0\4\20"+
    "\5\0\11\20\1\221\11\20\1\0\2\20\31\0\4\20"+
    "\5\0\6\20\1\222\14\20\1\0\2\20\31\0\4\20"+
    "\5\0\1\20\1\223\21\20\1\0\2\20\31\0\4\20"+
    "\5\0\2\20\1\224\20\20\1\0\2\20\31\0\4\20"+
    "\5\0\6\20\1\225\14\20\1\0\2\20\31\0\4\20"+
    "\5\0\7\20\1\226\13\20\1\0\2\20\31\0\4\20"+
    "\5\0\1\227\13\20\1\230\6\20\1\0\2\20\31\0"+
    "\4\20\5\0\22\20\1\231\1\0\2\20\31\0\4\20"+
    "\5\0\4\20\1\224\16\20\1\0\2\20\17\0\1\155"+
    "\66\0\1\154\1\155\1\156\72\0\1\232\1\233\123\0"+
    "\1\234\67\0\1\235\60\0\1\236\76\0\1\237\67\0"+
    "\1\240\60\0\1\241\33\0\7\176\1\242\60\176\6\243"+
    "\1\244\1\245\60\243\13\0\1\246\54\0\10\202\1\112"+
    "\1\247\56\202\14\0\4\20\5\0\3\20\1\250\17\20"+
    "\1\0\2\20\20\0\1\206\1\0\2\251\5\0\4\251"+
    "\3\0\1\251\1\0\23\251\1\0\2\251\31\0\4\20"+
    "\5\0\10\20\1\252\3\20\1\253\6\20\1\0\2\20"+
    "\31\0\4\20\5\0\3\20\1\254\17\20\1\0\2\20"+
    "\31\0\4\20\5\0\13\20\1\255\7\20\1\0\2\20"+
    "\31\0\4\20\5\0\3\20\1\256\17\20\1\0\2\20"+
    "\31\0\4\20\5\0\14\20\1\257\6\20\1\0\2\20"+
    "\31\0\4\20\5\0\12\20\1\260\10\20\1\0\2\20"+
    "\31\0\4\20\5\0\13\20\1\261\7\20\1\0\2\20"+
    "\31\0\4\20\5\0\7\20\1\262\13\20\1\0\2\20"+
    "\20\0\1\220\1\0\2\263\5\0\4\263\3\0\1\263"+
    "\1\0\23\263\1\0\2\263\31\0\4\20\5\0\2\20"+
    "\1\264\20\20\1\0\2\20\31\0\4\20\5\0\11\20"+
    "\1\265\11\20\1\0\2\20\31\0\4\20\5\0\11\20"+
    "\1\266\11\20\1\0\2\20\20\0\1\267\10\0\4\20"+
    "\5\0\23\20\1\0\2\20\31\0\4\20\5\0\2\20"+
    "\1\270\20\20\1\0\2\20\31\0\4\20\5\0\10\20"+
    "\1\271\12\20\1\0\2\20\31\0\4\20\5\0\21\20"+
    "\1\272\1\20\1\0\2\20\31\0\4\20\5\0\2\20"+
    "\1\273\20\20\1\0\2\20\31\0\4\20\5\0\10\20"+
    "\1\274\12\20\1\0\2\20\15\0\1\232\2\70\65\232"+
    "\7\233\1\275\60\233\30\0\1\276\100\0\1\277\63\0"+
    "\1\300\62\0\1\301\100\0\1\302\63\0\1\303\32\0"+
    "\6\176\1\304\1\242\60\176\7\243\1\305\60\243\7\306"+
    "\1\307\60\306\6\310\1\304\1\245\60\310\10\247\1\202"+
    "\1\0\56\247\14\0\4\20\5\0\4\20\1\311\16\20"+
    "\1\0\2\20\31\0\4\20\5\0\3\20\1\312\17\20"+
    "\1\0\2\20\31\0\4\20\5\0\4\20\1\313\16\20"+
    "\1\0\2\20\31\0\4\20\5\0\14\20\1\314\6\20"+
    "\1\0\2\20\20\0\1\315\10\0\4\20\5\0\23\20"+
    "\1\0\2\20\31\0\4\20\5\0\1\20\1\316\21\20"+
    "\1\0\2\20\31\0\4\20\5\0\4\20\1\317\16\20"+
    "\1\0\2\20\31\0\4\20\5\0\14\20\1\320\6\20"+
    "\1\0\2\20\20\0\1\321\10\0\4\20\5\0\23\20"+
    "\1\0\2\20\31\0\4\20\5\0\2\20\1\322\20\20"+
    "\1\0\2\20\31\0\4\20\5\0\4\20\1\323\16\20"+
    "\1\0\2\20\31\0\4\20\5\0\11\20\1\324\11\20"+
    "\1\0\2\20\31\0\4\20\5\0\2\20\1\325\20\20"+
    "\1\0\2\20\20\0\1\267\1\0\2\326\5\0\4\326"+
    "\3\0\1\326\1\0\23\326\1\0\2\326\31\0\4\20"+
    "\5\0\1\327\22\20\1\0\2\20\31\0\4\20\5\0"+
    "\6\20\1\330\14\20\1\0\2\20\31\0\4\20\5\0"+
    "\6\20\1\331\14\20\1\0\2\20\31\0\4\20\5\0"+
    "\3\20\1\332\17\20\1\0\2\20\31\0\4\20\5\0"+
    "\1\333\22\20\1\0\2\20\15\0\6\233\1\70\1\275"+
    "\60\233\31\0\1\334\71\0\1\335\37\0\1\336\115\0"+
    "\1\337\71\0\1\340\34\0\6\310\1\341\1\245\60\310"+
    "\6\342\1\341\1\343\60\342\7\243\1\245\60\243\14\0"+
    "\4\20\5\0\5\20\1\344\15\20\1\0\2\20\31\0"+
    "\4\20\5\0\13\20\1\345\7\20\1\0\2\20\31\0"+
    "\4\20\5\0\2\20\1\346\20\20\1\0\2\20\31\0"+
    "\4\20\5\0\5\20\1\347\15\20\1\0\2\20\20\0"+
    "\1\315\1\0\2\350\5\0\4\350\3\0\1\350\1\0"+
    "\23\350\1\0\2\350\31\0\4\20\5\0\12\20\1\351"+
    "\10\20\1\0\2\20\31\0\4\20\5\0\2\20\1\352"+
    "\20\20\1\0\2\20\31\0\4\20\5\0\1\20\1\353"+
    "\21\20\1\0\2\20\20\0\1\321\1\0\2\354\5\0"+
    "\4\354\3\0\1\354\1\0\23\354\1\0\2\354\31\0"+
    "\4\20\5\0\1\355\22\20\1\0\2\20\31\0\4\20"+
    "\5\0\6\20\1\356\14\20\1\0\2\20\20\0\1\357"+
    "\10\0\4\20\5\0\23\20\1\0\2\20\20\0\1\360"+
    "\10\0\4\20\5\0\23\20\1\0\2\20\31\0\4\20"+
    "\5\0\7\20\1\361\13\20\1\0\2\20\31\0\4\20"+
    "\5\0\4\20\1\362\16\20\1\0\2\20\31\0\4\20"+
    "\5\0\2\20\1\363\20\20\1\0\2\20\31\0\4\20"+
    "\5\0\7\20\1\364\13\20\1\0\2\20\31\0\4\20"+
    "\5\0\7\20\1\365\13\20\1\0\2\20\44\0\1\6"+
    "\71\0\1\366\41\0\1\336\1\0\2\367\5\0\4\367"+
    "\3\0\1\367\1\0\23\367\1\0\2\367\44\0\1\370"+
    "\71\0\1\371\36\0\7\306\1\343\60\306\6\342\1\0"+
    "\1\343\60\342\14\0\4\20\5\0\6\20\1\372\14\20"+
    "\1\0\2\20\31\0\4\20\5\0\3\20\1\373\17\20"+
    "\1\0\2\20\20\0\1\374\3\0\1\375\4\0\4\20"+
    "\5\0\23\20\1\0\2\20\20\0\1\376\10\0\4\20"+
    "\5\0\23\20\1\0\2\20\31\0\4\20\5\0\11\20"+
    "\1\377\11\20\1\0\2\20\16\0\2\u0100\1\u0101\6\0"+
    "\1\u0102\1\0\4\20\5\0\23\20\1\u0102\2\20\31\0"+
    "\4\20\5\0\10\20\1\u0103\12\20\1\0\2\20\31\0"+
    "\4\20\5\0\14\20\1\u0104\6\20\1\0\2\20\31\0"+
    "\4\20\5\0\7\20\1\u0105\13\20\1\0\2\20\20\0"+
    "\1\357\1\0\2\u0106\5\0\4\u0106\3\0\1\u0106\1\0"+
    "\23\u0106\1\0\2\u0106\20\0\1\360\1\0\2\u0107\5\0"+
    "\4\u0107\3\0\1\u0107\1\0\23\u0107\1\0\2\u0107\20\0"+
    "\1\u0108\10\0\4\20\5\0\23\20\1\0\2\20\31\0"+
    "\4\20\5\0\3\20\1\u0109\17\20\1\0\2\20\31\0"+
    "\4\20\5\0\3\20\1\u010a\17\20\1\0\2\20\31\0"+
    "\4\20\5\0\2\20\1\u010b\20\20\1\0\2\20\20\0"+
    "\1\u010c\10\0\4\20\5\0\23\20\1\0\2\20\45\0"+
    "\1\6\40\0\3\370\23\0\1\100\70\0\1\370\53\0"+
    "\4\20\5\0\7\20\1\u010d\13\20\1\0\2\20\31\0"+
    "\4\20\5\0\1\20\1\u010e\21\20\1\0\2\20\20\0"+
    "\1\374\1\0\3\375\4\0\4\375\3\0\1\375\1\0"+
    "\23\375\1\0\2\375\20\0\1\376\1\0\2\u010f\5\0"+
    "\4\u010f\3\0\1\u010f\1\0\23\u010f\1\0\2\u010f\20\0"+
    "\1\u0110\5\0\1\u0111\2\0\4\20\5\0\23\20\1\u0112"+
    "\2\20\16\0\3\u0100\6\0\1\u0102\35\0\1\u0102\20\0"+
    "\2\u0100\1\u0101\1\0\2\u0102\3\0\1\u0102\1\0\4\u0102"+
    "\3\0\1\u0102\1\0\26\u0102\31\0\4\20\5\0\17\20"+
    "\1\u0113\3\20\1\0\2\20\31\0\4\20\5\0\1\20"+
    "\1\u0114\21\20\1\0\2\20\31\0\4\20\5\0\2\20"+
    "\1\u0115\20\20\1\0\2\20\20\0\1\u0108\1\0\2\u0116"+
    "\5\0\4\u0116\3\0\1\u0116\1\0\23\u0116\1\0\2\u0116"+
    "\16\0\2\u0117\1\u0118\10\0\4\20\5\0\1\20\1\u0119"+
    "\1\20\1\u011a\1\20\1\u011b\1\20\1\u011c\3\20\1\u011d"+
    "\7\20\1\0\2\20\20\0\1\u011e\10\0\4\20\5\0"+
    "\23\20\1\0\2\20\31\0\4\20\5\0\3\20\1\u011f"+
    "\17\20\1\0\2\20\20\0\1\u010c\1\0\2\u0120\5\0"+
    "\4\u0120\3\0\1\u0120\1\0\23\u0120\1\0\2\u0120\31\0"+
    "\4\20\5\0\3\20\1\u0121\17\20\1\0\2\20\31\0"+
    "\4\20\5\0\2\20\1\u0122\20\20\1\0\2\20\20\0"+
    "\1\u0110\1\0\2\u0112\2\0\1\u0111\2\0\4\u0112\3\0"+
    "\1\u0112\1\0\26\u0112\15\0\10\u0111\1\u0123\1\u0124\56\u0111"+
    "\3\0\1\u0125\10\0\4\20\5\0\23\20\1\0\2\20"+
    "\20\0\1\u0126\10\0\4\20\5\0\23\20\1\0\2\20"+
    "\20\0\1\u0127\10\0\4\20\5\0\23\20\1\0\2\20"+
    "\16\0\3\u0117\22\0\1\u0128\1\0\1\u0129\1\0\1\u012a"+
    "\1\0\1\u012b\3\0\1\u012c\30\0\2\u0117\1\u0118\1\0"+
    "\2\u012d\5\0\4\u012d\3\0\1\u012d\1\0\1\u012d\1\u012e"+
    "\1\u012d\1\u012f\1\u012d\1\u0130\1\u012d\1\u0131\3\u012d\1\u0132"+
    "\7\u012d\1\0\2\u012d\31\0\4\20\5\0\6\20\1\u0133"+
    "\14\20\1\0\2\20\31\0\4\20\5\0\1\20\1\u0134"+
    "\21\20\1\0\2\20\31\0\4\20\5\0\15\20\1\u0135"+
    "\5\20\1\0\2\20\31\0\4\20\5\0\10\20\1\u0136"+
    "\12\20\1\0\2\20\31\0\4\20\5\0\14\20\1\u0137"+
    "\6\20\1\0\2\20\20\0\1\u011e\1\0\2\u0138\5\0"+
    "\4\u0138\3\0\1\u0138\1\0\23\u0138\1\0\2\u0138\31\0"+
    "\4\20\5\0\12\20\1\u0139\10\20\1\0\2\20\20\0"+
    "\1\u013a\10\0\4\20\5\0\23\20\1\0\2\20\31\0"+
    "\4\20\5\0\11\20\1\u013b\11\20\1\0\2\20\20\0"+
    "\1\u0123\6\0\1\u013c\55\0\10\u0124\1\u0111\1\u013d\56\u0124"+
    "\3\0\1\u0125\1\0\2\u0107\5\0\4\u0107\3\0\25\u0107"+
    "\1\0\2\u0107\20\0\1\u0126\1\0\2\u013e\5\0\4\u013e"+
    "\3\0\1\u013e\1\0\23\u013e\1\0\2\u013e\20\0\1\u0127"+
    "\1\0\2\u013f\5\0\4\u013f\3\0\1\u013f\1\0\23\u013f"+
    "\1\0\2\u013f\50\0\1\u0140\62\0\1\u0141\103\0\1\u0142"+
    "\62\0\1\u0143\73\0\1\u0144\42\0\4\20\5\0\13\20"+
    "\1\u0145\7\20\1\0\2\20\31\0\4\20\5\0\15\20"+
    "\1\u0146\5\20\1\0\2\20\31\0\4\20\5\0\1\20"+
    "\1\u0147\21\20\1\0\2\20\31\0\4\20\5\0\6\20"+
    "\1\u0148\14\20\1\0\2\20\31\0\4\20\5\0\12\20"+
    "\1\u0149\10\20\1\0\2\20\20\0\1\u014a\10\0\4\20"+
    "\5\0\23\20\1\0\2\20\20\0\1\u013a\1\0\2\u014b"+
    "\5\0\4\u014b\3\0\1\u014b\1\0\23\u014b\1\0\2\u014b"+
    "\20\0\1\u014c\10\0\4\20\5\0\23\20\1\0\2\20"+
    "\30\0\1\u0112\54\0\10\u013d\1\u0124\1\u014d\56\u013d\40\0"+
    "\1\u014e\71\0\1\u014f\53\0\1\u0150\74\0\1\u0151\73\0"+
    "\1\u0152\44\0\4\20\5\0\3\20\1\u0153\17\20\1\0"+
    "\2\20\31\0\4\20\5\0\13\20\1\u0154\7\20\1\0"+
    "\2\20\31\0\4\20\5\0\7\20\1\u0155\13\20\1\0"+
    "\2\20\31\0\4\20\5\0\11\20\1\u0156\11\20\1\0"+
    "\2\20\31\0\4\20\5\0\15\20\1\u0157\5\20\1\0"+
    "\2\20\20\0\1\u014a\1\0\2\u0158\5\0\4\u0158\3\0"+
    "\1\u0158\1\0\23\u0158\1\0\2\u0158\20\0\1\u014c\1\0"+
    "\2\u0159\5\0\4\u0159\3\0\1\u0159\1\0\23\u0159\1\0"+
    "\2\u0159\15\0\10\u014d\1\u013d\1\0\56\u014d\30\0\1\u015a"+
    "\77\0\1\u015b\63\0\1\u015c\71\0\1\u015d\73\0\1\u015e"+
    "\41\0\4\20\5\0\11\20\1\u015f\11\20\1\0\2\20"+
    "\31\0\4\20\5\0\2\20\1\u0160\20\20\1\0\2\20"+
    "\31\0\4\20\5\0\11\20\1\u0161\11\20\1\0\2\20"+
    "\31\0\4\20\5\0\10\20\1\u0162\12\20\1\0\2\20"+
    "\53\0\1\u0163\60\0\1\u0164\76\0\1\u0165\66\0\1\u0166"+
    "\46\0\4\20\5\0\16\20\1\u0167\4\20\1\0\2\20"+
    "\31\0\4\20\5\0\1\u0168\22\20\1\0\2\20\31\0"+
    "\4\20\5\0\3\20\1\u0169\17\20\1\0\2\20\60\0"+
    "\1\u016a\51\0\1\u016b\72\0\1\u016c\53\0\4\20\5\0"+
    "\6\20\1\u016d\14\20\1\0\2\20\31\0\4\20\5\0"+
    "\14\20\1\u016e\6\20\1\0\2\20\50\0\1\u016f\75\0"+
    "\1\u0170\42\0\4\20\5\0\7\20\1\u0162\13\20\1\0"+
    "\2\20\31\0\4\20\5\0\1\20\1\u0171\21\20\1\0"+
    "\2\20\51\0\1\u0166\61\0\1\u0172\41\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  1,  0,  9,  1,  1,  9,  1,  9,  3,  3,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  9,  9,  9,  9,  1,  9,  1,  9,  1,  9,  1, 
     9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  0, 
     0,  0,  1,  9,  0,  0,  0,  0,  0,  0,  9,  9,  9,  1,  9,  1, 
     9,  9,  1,  0,  9,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  9,  0,  9,  9, 
     9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 
     0,  0,  1,  9,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     1,  1,  1,  3,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  1,  0, 13,  0,  1, 13,  1,  1,  1,  3,  1,  1,  1, 
     3,  1, 13,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  9,  0,  0, 
     2,  0,  0,  9,  0,  0,  0,  0,  1,  1,  1,  1,  0,  1,  1,  1, 
     0,  1,  1,  3,  3, 13,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     9,  0,  0,  1,  1,  3,  3, 13,  1,  3,  1, 13,  1,  1,  0,  0, 
     3,  1,  1,  1,  3,  0, 13,  0,  0,  1,  1,  0, 13,  0,  3,  0, 
     0, 13,  1,  1,  1, 13, 13,  0,  3,  3,  1,  0,  1,  1, 13,  0, 
     0, 13,  3,  3,  3, 13,  0,  0,  1,  1,  1,  1,  1,  0,  1, 13, 
     3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13,  5,  5,  5, 
     5,  5,  1,  1,  1,  1,  1, 13,  3,  0,  3,  0,  0, 13, 13,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  0, 13,  0,  0,  0,  0,  0, 
     0,  0,  1,  1,  1,  1,  1, 13, 13,  0,  9,  0,  0,  0,  1,  1, 
     1,  1,  0,  0,  9,  0,  1,  1,  1,  0,  0,  9,  1,  1,  0,  0, 
     1,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	StringBuffer string=new StringBuffer();
	String fileName;
	public void setFileName(String name) {
		fileName=name;
	}
	public String getFileName() {
		return fileName;
	}
	private Symbol symbol(int type) {
		return new Symbol(type,yyline,yycolumn,
		    new Token(type,fileName,yytext(),
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+yytext().length()));
	}
	private Symbol symbol(int type, String value) {
		return new Symbol(type,yyline,yycolumn,
		    new Token(type,fileName,value,
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+yytext().length()));
	}
	private Stack<Symbol> openParens = new Stack<Symbol>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TypescriptDefScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TypescriptDefScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[16184];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;
    int yy_pushbackPos_l = yy_pushbackPos = -1;
    boolean yy_was_pushback;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            yy_pushbackPos = yy_pushbackPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            yy_pushbackPos_l = yy_pushbackPos;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 2) == 2 )
            yy_pushbackPos_l = yy_currentPos_l;

          if ( (yy_attributes & 1) == 1 ) {
            yy_was_pushback = (yy_attributes & 4) == 4;
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;
      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos_l;

      switch (yy_action) {

        case 344: 
          {  return symbol(sym.IMPLEMENTS);  }
        case 371: break;
        case 0: 
        case 15: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 77: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 132: 
        case 134: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 167: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 179: 
        case 180: 
        case 181: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 205: 
        case 206: 
        case 207: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 232: 
        case 233: 
        case 234: 
        case 236: 
        case 237: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 249: 
        case 250: 
        case 254: 
        case 258: 
        case 259: 
        case 260: 
        case 264: 
        case 265: 
        case 266: 
        case 268: 
        case 269: 
        case 274: 
        case 275: 
        case 276: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 286: 
        case 288: 
        case 289: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 312: 
        case 314: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 338: 
        case 340: 
        case 341: 
        case 342: 
        case 350: 
        case 351: 
        case 353: 
        case 358: 
        case 359: 
        case 364: 
        case 365: 
          {  return symbol(sym.IDENTIFIER);  }
        case 372: break;
        case 60: 
        case 61: 
          {  yybegin(YYINITIAL); yypushback(yylength());  }
        case 373: break;
        case 81: 
          {  return symbol(sym.MINUSMINUS);  }
        case 374: break;
        case 127: 
          {  return symbol(sym.RPAREN_FUNC);  }
        case 375: break;
        case 165: 
          {  return symbol(sym.LPAREN_FUNC);  }
        case 376: break;
        case 343: 
          {  return symbol(sym.PROTECTED);  }
        case 377: break;
        case 330: 
          {  return symbol(sym.INTERFACE);  }
        case 378: break;
        case 318: 
          {  return symbol(sym.ABSTRACT);  }
        case 379: break;
        case 317: 
          {  return symbol(sym.FUNCTION);  }
        case 380: break;
        case 46: 
          {  return symbol(sym.QUESTION);  }
        case 381: break;
        case 80: 
          {  return symbol(sym.PLUSPLUS);  }
        case 382: break;
        case 106: 
          {  return symbol(sym.NOTEQUALS);  }
        case 383: break;
        case 131: 
          {  return symbol(sym.DOTDOTDOT);  }
        case 384: break;
        case 48: 
          {  return symbol(sym.AT);  }
        case 385: break;
        case 47: 
          {  return symbol(sym.AND);  }
        case 386: break;
        case 43: 
          {  return symbol(sym.NOT);  }
        case 387: break;
        case 41: 
          {  return symbol(sym.LT);  }
        case 388: break;
        case 37: 
          {  return symbol(sym.COL);  }
        case 389: break;
        case 9: 
          {  return symbol(sym.DIV);  }
        case 390: break;
        case 5: 
          {  /* ignore */  }
        case 391: break;
        case 3: 
        case 56: 
          {  /* ignore */  }
        case 392: break;
        case 14: 
          {  return symbol(sym.GT);  }
        case 393: break;
        case 16: 
        case 17: 
        case 78: 
        case 79: 
          {  return symbol(sym.INT);  }
        case 394: break;
        case 20: 
          {  return symbol(sym.DOT);  }
        case 395: break;
        case 55: 
          {  return symbol(sym.LF);  }
        case 396: break;
        case 76: 
          {  return symbol(sym.GTE);  }
        case 397: break;
        case 105: 
          {  return symbol(sym.LTE);  }
        case 398: break;
        case 130: 
          {  return symbol(sym.INT);  }
        case 399: break;
        case 135: 
          {  return symbol(sym.NEW);  }
        case 400: break;
        case 168: 
          {  return symbol(sym.IS);  }
        case 401: break;
        case 178: 
          {  return symbol(sym.AS);  }
        case 402: break;
        case 213: 
          {  return symbol(sym.VAR);  }
        case 403: break;
        case 224: 
          {  return symbol(sym.DOC);  }
        case 404: break;
        case 49: 
        case 57: 
        case 58: 
        case 59: 
          {  System.out.println("unmatched:"+yytext());  }
        case 405: break;
        case 189: 
          {  yybegin(YYINITIAL); return symbol(sym.TYPE_MACRO);  }
        case 406: break;
        case 352: 
        case 356: 
          {  return symbol(sym.DECLARE_CLASS);  }
        case 407: break;
        case 339: 
        case 346: 
          {  return symbol(sym.DECLARE_ENUM);  }
        case 408: break;
        case 262: 
          {  return symbol(sym.CONST);  }
        case 409: break;
        case 261: 
          {  return symbol(sym.CLASS);  }
        case 410: break;
        case 45: 
          {  return symbol(sym.TUBE);  }
        case 411: break;
        case 42: 
          {  return symbol(sym.COMMA);  }
        case 412: break;
        case 38: 
          {  return symbol(sym.SEMI);  }
        case 413: break;
        case 10: 
          {  return symbol(sym.MULT);  }
        case 414: break;
        case 18: 
          {  return symbol(sym.PLUS);  }
        case 415: break;
        case 19: 
          {  return symbol(sym.MINUS);  }
        case 416: break;
        case 66: 
          {  return symbol(sym.TUBE);  }
        case 417: break;
        case 107: 
        case 108: 
          {  return symbol(sym.TUBE);  }
        case 418: break;
        case 110: 
          {  return symbol(sym.OROR);  }
        case 419: break;
        case 231: 
          {  return symbol(sym.ENUM);  }
        case 420: break;
        case 235: 
          {  return symbol(sym.FROM);  }
        case 421: break;
        case 51: 
          {  string.append('\\');  }
        case 422: break;
        case 54: 
          {  string.append('\\');  }
        case 423: break;
        case 112: 
          {  string.append('\\');  }
        case 424: break;
        case 113: 
          {  string.append('\"');  }
        case 425: break;
        case 114: 
          {  string.append('\n');  }
        case 426: break;
        case 115: 
          {  string.append('\t');  }
        case 427: break;
        case 116: 
          {  string.append('\r');  }
        case 428: break;
        case 117: 
          {  string.append('\'');  }
        case 429: break;
        case 67: 
          {  yybegin(EOL_COMMENT);  }
        case 430: break;
        case 368: 
        case 369: 
          {  return symbol(sym.DECLARE_FUNCTION);  }
        case 431: break;
        case 52: 
          {  yybegin(YYINITIAL); 
                          return symbol(sym.IDENTIFIER, 
                          "\""+string.toString()+"\"");  }
        case 432: break;
        case 246: 
          {  yypushback(yylength()); yybegin(TYPE_MACRO);  }
        case 433: break;
        case 6: 
        case 7: 
          {  /*System.err.println("LF");*/  return symbol(sym.LF);  }
        case 434: break;
        case 163: 
        case 195: 
          {  /*System.err.println("COMMENT: "+yytext());*/ /* ignore */  }
        case 435: break;
        case 21: 
          {  string.setLength(0); yybegin(CHAR);  }
        case 436: break;
        case 360: 
        case 363: 
          {  return symbol(sym.DECLARE_MODULE);  }
        case 437: break;
        case 8: 
          {  string.setLength(0); yybegin(STRING);  }
        case 438: break;
        case 311: 
          {  return symbol(sym.PRIVATE);  }
        case 439: break;
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
          {  return symbol(sym.DECLARE);  }
        case 440: break;
        case 287: 
          {  return symbol(sym.PUBLIC);  }
        case 441: break;
        case 277: 
          {  return symbol(sym.STATIC);  }
        case 442: break;
        case 273: 
          {  return symbol(sym.EXTENDS);  }
        case 443: break;
        case 270: 
          {  return symbol(sym.TYPEOF);  }
        case 444: break;
        case 257: 
          {  return symbol(sym.EXPORT);  }
        case 445: break;
        case 252: 
          {  return symbol(sym.IMPORT);  }
        case 446: break;
        case 53: 
          {  string.append( yytext() );  }
        case 447: break;
        case 50: 
          {  string.append( yytext() );  }
        case 448: break;
        case 44: 
          {  return symbol(sym.MATCHES);  }
        case 449: break;
        case 40: 
          {  return symbol(sym.RSPAREN);  }
        case 450: break;
        case 39: 
          {  return symbol(sym.RCPAREN);  }
        case 451: break;
        case 36: 
          {  return symbol(sym.LCPAREN);  }
        case 452: break;
        case 11: 
          {  return symbol(sym.RPAREN);  }
        case 453: break;
        case 12: 
          {  return symbol(sym.LPAREN);  }
        case 454: break;
        case 13: 
          {  return symbol(sym.ASSIGN);  }
        case 455: break;
        case 22: 
          {  return symbol(sym.LSPAREN);  }
        case 456: break;
        case 74: 
          {  return symbol(sym.EQUALS);  }
        case 457: break;
        case 75: 
          {  return symbol(sym.IMPLIES);  }
        case 458: break;
        case 82: 
          {  return symbol(sym.DOTDOT);  }
        case 459: break;
        case 84: 
          {  return symbol(sym.SQUARE);  }
        case 460: break;
        case 111: 
          {  return symbol(sym.ANDAND);  }
        case 461: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            switch (yy_lexical_state) {
            case EOL_COMMENT:
              {  yybegin(YYINITIAL);  }
            case 371: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
